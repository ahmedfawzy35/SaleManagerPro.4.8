// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaleManagerPro.Data;

namespace SaleManagerPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SaleManagerPro.Models.Cash.BankAccount", b =>
                {
                    b.Property<int>("IdBankAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartBalance")
                        .HasColumnType("float");

                    b.HasKey("IdBankAccount");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromCusByCheck", b =>
                {
                    b.Property<int>("IdCashInFromCusByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromCusByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromCusByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromCusInstallmentByCheck", b =>
                {
                    b.Property<int>("IdCashInFromCusInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromCusInstallment");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromCusInstallmentByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromInComeByCheck", b =>
                {
                    b.Property<int>("IdCashInFromInCome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInComeItem")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromInCome");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdInComeItem");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromInComeByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromLoanByCheck", b =>
                {
                    b.Property<int>("IdCashInFromLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoan")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromLoan");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdLoan");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromLoanByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromSalerByCheck", b =>
                {
                    b.Property<int>("IdCashInFromSaler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromSaler");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSaler");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromSalerByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromSalerInstallmentByCheck", b =>
                {
                    b.Property<int>("IdCashInFromSalerInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSalersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromSalerInstallment");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSalersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromSalerInstallmentByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.FromCheckToBank", b =>
                {
                    b.Property<int>("IdFromCheckToBank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBankAccount")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdFromCheckToBank");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdBankAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("FromCheckToBanks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.FromCheckToCash", b =>
                {
                    b.Property<int>("IdFromCheckToCash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdFromCheckToCash");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdUser");

                    b.ToTable("FromCheckToCash");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromCus", b =>
                {
                    b.Property<int>("IdCashInFromCus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromCus");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromCus");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromCusInstallment", b =>
                {
                    b.Property<int>("IdCashInFromCusInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromCusInstallment");

                    b.HasIndex("IdCustomersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromCusInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromInCome", b =>
                {
                    b.Property<int>("IdCashInFromInCome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInComeItem")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromInCome");

                    b.HasIndex("IdInComeItem");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromInComes");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromLoan", b =>
                {
                    b.Property<int>("IdCashInFromLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoan")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromLoan");

                    b.HasIndex("IdLoan");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromLoans");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromSaler", b =>
                {
                    b.Property<int>("IdCashInFromSaler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromSaler");

                    b.HasIndex("IdSaler");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromSalers");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromSalerInstallment", b =>
                {
                    b.Property<int>("IdCashInFromSalerInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSalersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashInFromSalerInstallment");

                    b.HasIndex("IdSalersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashInFromSalerInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToCusByCheck", b =>
                {
                    b.Property<int>("IdCashOutToCusByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToCusByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToCusByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToCusInstallmentByCheck", b =>
                {
                    b.Property<int>("IdCashOutToCusInstallmentByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToCusInstallmentByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToCusInstallmentByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToLoansInstallmentByCheck", b =>
                {
                    b.Property<int>("IdCashOutToLoansInstallmentByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoansInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToLoansInstallmentByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdLoansInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToLoansInstallmentByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToOutComeByCheck", b =>
                {
                    b.Property<int>("IdCashOutToOutComeByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOutComeItem")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToOutComeByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdOutComeItem");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToOutComeByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToSalerByCheck", b =>
                {
                    b.Property<int>("IdCashOutToSalerByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToSalerByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSaler");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToSalerByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToSalerInstallmentByCheck", b =>
                {
                    b.Property<int>("IdCashOutToSalerInstallmentByCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSalersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToSalerInstallmentByCheck");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSalersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToSalerInstallmentByChecks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToCus", b =>
                {
                    b.Property<int>("IdCashOutToCus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToCus");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToCuss");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToCusInstallment", b =>
                {
                    b.Property<int>("IdCashOutToCusInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToCusInstallment");

                    b.HasIndex("IdCustomersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToCusInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToLoansInstallment", b =>
                {
                    b.Property<int>("IdCashOutToLoansInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoansInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToLoansInstallment");

                    b.HasIndex("IdLoansInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToLoansInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToOutCome", b =>
                {
                    b.Property<int>("IdCashOutToOutCome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOutComeItem")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToOutCome");

                    b.HasIndex("IdOutComeItem");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToOutComes");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToSaler", b =>
                {
                    b.Property<int>("IdCashOutToSaler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToSaler");

                    b.HasIndex("IdSaler");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToSalers");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToSalerInstallment", b =>
                {
                    b.Property<int>("IdCashOutToSalerInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSalersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCashOutToSalerInstallment");

                    b.HasIndex("IdSalersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("CashOutToSalerInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.FromCashToBank", b =>
                {
                    b.Property<int>("IdFromCashToBank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBankAccount")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdFromCashToBank");

                    b.HasIndex("IdBankAccount");

                    b.HasIndex("IdUser");

                    b.ToTable("FromCashToBanks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToCus", b =>
                {
                    b.Property<int>("IdRePaidCheckToCus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToCus");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToCuss");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToCusInstallment", b =>
                {
                    b.Property<int>("IdRePaidCheckToInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToInstallment");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdCustomersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToCusInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToLoansInstallment", b =>
                {
                    b.Property<int>("IdRePaidCheckToLoansInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoansInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToLoansInstallment");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdLoansInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToLoansInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToOutCome", b =>
                {
                    b.Property<int>("IdRePaidCheckToOutCome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdOutComeItem")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToOutCome");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdOutComeItem");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToOutComes");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToSaler", b =>
                {
                    b.Property<int>("IdRePaidCheckToSaler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToSaler");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSaler");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToSalers");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToSalerInstallment", b =>
                {
                    b.Property<int>("IdRePaidCheckToSalerInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSalersInstallment")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdRePaidCheckToSalerInstallment");

                    b.HasIndex("CheckNumber");

                    b.HasIndex("IdSalersInstallment");

                    b.HasIndex("IdUser");

                    b.ToTable("RePaidCheckToSalerInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.Checks.ChecksIn", b =>
                {
                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CheckAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRePaid")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckNumber");

                    b.ToTable("ChecksIns");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.Checks.ChecksOut", b =>
                {
                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateInsert")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRelease")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBankAccount")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckNumber");

                    b.HasIndex("IdBankAccount");

                    b.ToTable("ChecksOuts");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Customers.Customer", b =>
                {
                    b.Property<int>("IdCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartAccount")
                        .HasColumnType("float");

                    b.HasKey("IdCustomer");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Customers.CustomerBankAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccuntNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCustomer");

                    b.ToTable("CustomersBankAccounts");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Customers.CustomerPhones", b =>
                {
                    b.Property<int>("IdCustomersPhones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HaveWhatsApp")
                        .HasColumnType("bit");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCustomersPhones");

                    b.HasIndex("IdCustomer");

                    b.ToTable("CustomersPhones");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdEmployee");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.AddToSalary", b =>
                {
                    b.Property<int>("IdAddToSalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdAddToSalary");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("AddToSalaries");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.AddToSalaryForAll", b =>
                {
                    b.Property<int>("IdAddToSalaryForAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdAddToSalaryForAll");

                    b.HasIndex("IdUser");

                    b.ToTable("AddToSalaryForAlls");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.Department", b =>
                {
                    b.Property<int>("IdDepartment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("Root")
                        .HasColumnType("int");

                    b.HasKey("IdDepartment");

                    b.HasIndex("IdUser");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeeDetails", b =>
                {
                    b.Property<int>("IdEmployeeDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationalQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDepartment")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdFinancialDegree")
                        .HasColumnType("int");

                    b.Property<int>("IdGobDegree")
                        .HasColumnType("int");

                    b.Property<int>("IdImages")
                        .HasColumnType("int");

                    b.Property<int>("IdJob")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("IsMaried")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("ScientificDegree")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEmployeeDetails");

                    b.HasIndex("IdDepartment");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdFinancialDegree");

                    b.HasIndex("IdGobDegree");

                    b.HasIndex("IdImages");

                    b.HasIndex("IdJob");

                    b.HasIndex("IdUser");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeePromotion", b =>
                {
                    b.Property<int>("IdEmployeePromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.HasKey("IdEmployeePromotion");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("EmployeePromotions");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeePunishment", b =>
                {
                    b.Property<int>("IdEmployeePunishment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.HasKey("IdEmployeePunishment");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("EmployeePunishments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.FinancialDegree", b =>
                {
                    b.Property<int>("IdFinancialDegree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Nmae")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFinancialDegree");

                    b.HasIndex("IdUser");

                    b.ToTable("FinancialDegrees");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.Job", b =>
                {
                    b.Property<int>("IdJob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdJob");

                    b.HasIndex("IdUser");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.JobDegree", b =>
                {
                    b.Property<int>("IdGobDegree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdGobDegree");

                    b.HasIndex("IdUser");

                    b.ToTable("JobDegrees");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.LessToSalary", b =>
                {
                    b.Property<int>("IdLessToSalary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdLessToSalary");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("LessToSalarys");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.LessToSalaryForAll", b =>
                {
                    b.Property<int>("IdLessToSalaryForAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdLessToSalaryForAll");

                    b.HasIndex("IdUser");

                    b.ToTable("LessToSalaryForAlls");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.SalaryAdd", b =>
                {
                    b.Property<int>("IdSalaryAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdSalaryAdd");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("SalaryAdds");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.SalaryLess", b =>
                {
                    b.Property<int>("IdSalaryLess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdSalaryLess");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdUser");

                    b.ToTable("SalaryLesses");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Images", b =>
                {
                    b.Property<int>("IdImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdImages");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SaleManagerPro.Models.InComesAndOutComes.InComeItem", b =>
                {
                    b.Property<int>("IdInComeItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdInComeItem");

                    b.ToTable("InComeItems");
                });

            modelBuilder.Entity("SaleManagerPro.Models.InComesAndOutComes.OutComeItem", b =>
                {
                    b.Property<int>("IdOutComeItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdOutComeItem");

                    b.ToTable("OutComeItems");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.CustomersInstallment", b =>
                {
                    b.Property<int>("IdCustomersInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePaied")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInstallmentOrder")
                        .HasColumnType("int");

                    b.Property<int?>("InstallmentPurchaseIdInstallmentPurchase")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdCustomersInstallment");

                    b.HasIndex("IdInstallmentOrder");

                    b.HasIndex("InstallmentPurchaseIdInstallmentPurchase");

                    b.ToTable("CustomersInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.InstallmentOrder", b =>
                {
                    b.Property<int>("IdInstallmentOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdminstrativeExpenses")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayesCycl")
                        .HasColumnType("int");

                    b.Property<int>("ForgivnessDayes")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<bool>("InLawDepartment")
                        .HasColumnType("bit");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<double>("LateExpenses")
                        .HasColumnType("float");

                    b.Property<double>("ValueEnd")
                        .HasColumnType("float");

                    b.Property<double>("ValueStart")
                        .HasColumnType("float");

                    b.HasKey("IdInstallmentOrder");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdOrder");

                    b.ToTable("InstallmentOrders");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.InstallmentPurchase", b =>
                {
                    b.Property<int>("IdInstallmentPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdminstrativeExpenses")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayesCycl")
                        .HasColumnType("int");

                    b.Property<int>("ForgivnessDayes")
                        .HasColumnType("int");

                    b.Property<int>("IdPurchase")
                        .HasColumnType("int");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<bool>("InLawDepartment")
                        .HasColumnType("bit");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<double>("LateExpenses")
                        .HasColumnType("float");

                    b.HasKey("IdInstallmentPurchase");

                    b.HasIndex("IdPurchase");

                    b.HasIndex("IdSaler");

                    b.ToTable("InstallmentPurchases");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.LoansInstallment", b =>
                {
                    b.Property<int>("IdLoansInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePaied")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLoan")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdLoansInstallment");

                    b.HasIndex("IdLoan");

                    b.ToTable("LoansInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.SalersInstallment", b =>
                {
                    b.Property<int>("IdSalersInstallment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePaied")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToPay")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdInstallmentPurchase")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdSalersInstallment");

                    b.HasIndex("IdInstallmentPurchase");

                    b.ToTable("SalersInstallments");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Loaners.Loan", b =>
                {
                    b.Property<int>("IdLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AdminstrativeExpenses")
                        .HasColumnType("float");

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayesCycl")
                        .HasColumnType("int");

                    b.Property<int>("ForgivnessDayes")
                        .HasColumnType("int");

                    b.Property<int>("IdLoaner")
                        .HasColumnType("int");

                    b.Property<bool>("InLawDepartment")
                        .HasColumnType("bit");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.Property<double>("LateExpenses")
                        .HasColumnType("float");

                    b.Property<double>("ValueEnd")
                        .HasColumnType("float");

                    b.Property<double>("ValueStart")
                        .HasColumnType("float");

                    b.HasKey("IdLoan");

                    b.HasIndex("IdLoaner");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Loaners.Loaner", b =>
                {
                    b.Property<int>("IdLoaner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLoaner");

                    b.ToTable("Loaners");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<double>("Paki")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdCustomer");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderBack", b =>
                {
                    b.Property<int>("IdOrderBack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<double>("Paki")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdOrderBack");

                    b.HasIndex("IdCustomer");

                    b.ToTable("OrderBacks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderBackDetails", b =>
                {
                    b.Property<int>("IdOrderDetailsBack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("IdOrderBack")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdOrderDetailsBack");

                    b.HasIndex("IdOrderBack");

                    b.HasIndex("IdProduct");

                    b.ToTable("OrderBackDetails");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderDetails", b =>
                {
                    b.Property<int>("IdOrderDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("IdOrder")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdOrderDetails");

                    b.HasIndex("IdOrder");

                    b.HasIndex("IdProduct");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.Purchase", b =>
                {
                    b.Property<int>("IdPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<double>("Paki")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdPurchase");

                    b.HasIndex("IdSaler");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseBack", b =>
                {
                    b.Property<int>("IdPurchaseBack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cash")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<double>("Paki")
                        .HasColumnType("float");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdPurchaseBack");

                    b.HasIndex("IdSaler");

                    b.ToTable("PurchaseBacks");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseBackDetails", b =>
                {
                    b.Property<int>("IdPurchaseBackDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdPurchaseBack")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdPurchaseBackDetails");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdPurchaseBack");

                    b.ToTable("PurchaseBackDetails");
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseDetails", b =>
                {
                    b.Property<int>("IdPurchaseDetails")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdPurchase")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("IdPurchaseDetails");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdPurchase");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.Catogry", b =>
                {
                    b.Property<int>("IdCatogry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCatogry");

                    b.HasIndex("IdUser");

                    b.ToTable("Catogrys");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCatogry")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<double>("LastPurchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("LimitInStok")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StartStock")
                        .HasColumnType("int");

                    b.Property<Guid>("guid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCatogry");

                    b.HasIndex("IdUser");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.ProductUnits", b =>
                {
                    b.Property<int>("IdProductUnits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("IdProductUnits");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUnit");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.Units", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUnit");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.Claime", b =>
                {
                    b.Property<int>("IdClaime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdClaime");

                    b.ToTable("Claimes");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.RoleClaime", b =>
                {
                    b.Property<int>("IdRoleClaime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdClaime")
                        .HasColumnType("int");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.HasKey("IdRoleClaime");

                    b.HasIndex("IdClaime");

                    b.HasIndex("IdRole");

                    b.ToTable("RoleClaimes");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.UserRole", b =>
                {
                    b.Property<int>("IdUserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdUserRole");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Salers.Saler", b =>
                {
                    b.Property<int>("IdSaler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartAccount")
                        .HasColumnType("float");

                    b.HasKey("IdSaler");

                    b.ToTable("Salers");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Salers.SalerBankAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccuntNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSaler");

                    b.ToTable("SalerBankAccounts");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Salers.SalerPhones", b =>
                {
                    b.Property<int>("IdCustomersPhones")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HaveWhatsApp")
                        .HasColumnType("bit");

                    b.Property<int>("IdSaler")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCustomersPhones");

                    b.HasIndex("IdSaler");

                    b.ToTable("SalerPhones");
                });

            modelBuilder.Entity("SaleManagerPro.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateEdit")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEdit")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromCusByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromCusInstallmentByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.CustomersInstallment", "CustomersInstallment")
                        .WithMany()
                        .HasForeignKey("IdCustomersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromInComeByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.InComesAndOutComes.InComeItem", "InComeItem")
                        .WithMany()
                        .HasForeignKey("IdInComeItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromLoanByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Loaners.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("IdLoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromSalerByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.CashInFromSalerInstallmentByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.SalersInstallment", "SalersInstallment")
                        .WithMany()
                        .HasForeignKey("IdSalersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.FromCheckToBank", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Cash.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("IdBankAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInByCheck.FromCheckToCash", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromCus", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromCusInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.CustomersInstallment", "CustomersInstallment")
                        .WithMany()
                        .HasForeignKey("IdCustomersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromInCome", b =>
                {
                    b.HasOne("SaleManagerPro.Models.InComesAndOutComes.InComeItem", "InComeItem")
                        .WithMany()
                        .HasForeignKey("IdInComeItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromLoan", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Loaners.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("IdLoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromSaler", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashIns.CashInCash.CashInFromSalerInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.SalersInstallment", "SalersInstallment")
                        .WithMany()
                        .HasForeignKey("IdSalersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToCusByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToCusInstallmentByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.CustomersInstallment", "CustomersInstallment")
                        .WithMany()
                        .HasForeignKey("IdCustomersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToLoansInstallmentByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.LoansInstallment", "LoansInstallment")
                        .WithMany()
                        .HasForeignKey("IdLoansInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToOutComeByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.InComesAndOutComes.OutComeItem", "OutComeItem")
                        .WithMany()
                        .HasForeignKey("IdOutComeItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToSalerByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutByCheck.CashOutToSalerInstallmentByCheck", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksOut", "ChecksOut")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.SalersInstallment", "SalersInstallment")
                        .WithMany()
                        .HasForeignKey("IdSalersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToCus", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToCusInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.CustomersInstallment", "CustomersInstallment")
                        .WithMany()
                        .HasForeignKey("IdCustomersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToLoansInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.LoansInstallment", "LoansInstallment")
                        .WithMany()
                        .HasForeignKey("IdLoansInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToOutCome", b =>
                {
                    b.HasOne("SaleManagerPro.Models.InComesAndOutComes.OutComeItem", "OutComeItem")
                        .WithMany()
                        .HasForeignKey("IdOutComeItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToSaler", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.CashOutToSalerInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.SalersInstallment", "SalersInstallment")
                        .WithMany()
                        .HasForeignKey("IdSalersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.CashOutCash.FromCashToBank", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("IdBankAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToCus", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToCusInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.CustomersInstallment", "CustomersInstallment")
                        .WithMany()
                        .HasForeignKey("IdCustomersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToLoansInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.LoansInstallment", "LoansInstallment")
                        .WithMany()
                        .HasForeignKey("IdLoansInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToOutCome", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.InComesAndOutComes.OutComeItem", "OutComeItem")
                        .WithMany()
                        .HasForeignKey("IdOutComeItem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToSaler", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.CashOuts.RePaidChecks.RePaidCheckToSalerInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.Checks.ChecksIn", "ChecksIn")
                        .WithMany()
                        .HasForeignKey("CheckNumber");

                    b.HasOne("SaleManagerPro.Models.Installments.SalersInstallment", "SalersInstallment")
                        .WithMany()
                        .HasForeignKey("IdSalersInstallment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Cash.Checks.ChecksOut", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Cash.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("IdBankAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Customers.CustomerBankAccounts", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Customers.CustomerPhones", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany("Phones")
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.AddToSalary", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.AddToSalaryForAll", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.Department", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeeDetails", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employees.Department", "Department")
                        .WithMany()
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Employees.FinancialDegree", "FinancialDegree")
                        .WithMany()
                        .HasForeignKey("IdFinancialDegree")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Employees.JobDegree", "JobDegree")
                        .WithMany()
                        .HasForeignKey("IdGobDegree")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Images", "Images")
                        .WithMany()
                        .HasForeignKey("IdImages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Employees.Job", "Job")
                        .WithMany()
                        .HasForeignKey("IdJob")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeePromotion", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.EmployeePunishment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.FinancialDegree", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.Job", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.JobDegree", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.LessToSalary", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.LessToSalaryForAll", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.SalaryAdd", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Employees.SalaryLess", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.CustomersInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.InstallmentOrder", "InstallmentOrder")
                        .WithMany("CustomersInstallments")
                        .HasForeignKey("IdInstallmentOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Installments.InstallmentPurchase", null)
                        .WithMany("CustomersInstallments")
                        .HasForeignKey("InstallmentPurchaseIdInstallmentPurchase");
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.InstallmentOrder", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.Order", "Order")
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.InstallmentPurchase", b =>
                {
                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("IdPurchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.LoansInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Loaners.Loan", "Loan")
                        .WithMany("LoansInstallment")
                        .HasForeignKey("IdLoan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Installments.SalersInstallment", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Installments.InstallmentPurchase", "InstallmentPurchase")
                        .WithMany()
                        .HasForeignKey("IdInstallmentPurchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Loaners.Loan", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Loaners.Loaner", "Loaner")
                        .WithMany()
                        .HasForeignKey("IdLoaner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.Order", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderBack", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderBackDetails", b =>
                {
                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.OrderBack", "OrderBack")
                        .WithMany()
                        .HasForeignKey("IdOrderBack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.OrderDetails", b =>
                {
                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.Order", "Order")
                        .WithMany()
                        .HasForeignKey("IdOrder")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.Purchase", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Customer")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseBack", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Customer")
                        .WithMany()
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseBackDetails", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseBack", "PurchaseBack")
                        .WithMany()
                        .HasForeignKey("IdPurchaseBack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.OrdersAndPurchaces.PurchaseDetails", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.OrdersAndPurchaces.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("IdPurchase")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.Catogry", b =>
                {
                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.Product", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Products.Catogry", "Catogry")
                        .WithMany()
                        .HasForeignKey("IdCatogry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Products.ProductUnits", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Products.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Products.Units", "Units")
                        .WithMany()
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.RoleClaime", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Roles.Claime", "Claime")
                        .WithMany()
                        .HasForeignKey("IdClaime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Roles.UserRole", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaleManagerPro.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Salers.SalerBankAccounts", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany("BankAccounts")
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaleManagerPro.Models.Salers.SalerPhones", b =>
                {
                    b.HasOne("SaleManagerPro.Models.Salers.Saler", "Saler")
                        .WithMany("Phones")
                        .HasForeignKey("IdSaler")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
